FORK(2)                    Linux Programmer's Manual                   FORK(2)



NNAAMMEE
       fork - create a child process

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       ppiidd__tt ffoorrkk((vvooiidd));;

DDEESSCCRRIIPPTTIIOONN
       ffoorrkk()  creates  a new process by duplicating the calling process.  The
       new process, referred to as the _c_h_i_l_d, is an  exact  duplicate  of  the
       calling  process,  referred  to as the _p_a_r_e_n_t, except for the following
       points:

       *  The child has its own unique process ID, and this PID does not match
          the ID of any existing process group (sseettppggiidd(2)).

       *  The  child's  parent  process ID is the same as the parent's process
          ID.

       *  The child does not inherit  its  parent's  memory  locks  (mmlloocckk(2),
          mmlloocckkaallll(2)).

       *  Process  resource  utilizations (ggeettrruussaaggee(2)) and CPU time counters
          (ttiimmeess(2)) are reset to zero in the child.

       *  The child's set of pending  signals  is  initially  empty  (ssiiggppeenndd--
          iinngg(2)).

       *  The  child  does  not  inherit semaphore adjustments from its parent
          (sseemmoopp(2)).

       *  The child does not inherit process-associated record locks from  its
          parent  (ffccnnttll(2)).   (On  the  other hand, it does inherit ffccnnttll(2)
          open file description locks and fflloocckk(2) locks from its parent.)

       *  The child does not inherit timers  from  its  parent  (sseettiittiimmeerr(2),
          aallaarrmm(2), ttiimmeerr__ccrreeaattee(2)).

       *  The  child  does not inherit outstanding asynchronous I/O operations
          from its parent (aaiioo__rreeaadd(3), aaiioo__wwrriittee(3)), nor does it inherit any
          asynchronous I/O contexts from its parent (see iioo__sseettuupp(2)).

       The  process  attributes  in  the  preceding  list are all specified in
       POSIX.1-2001.  The parent and child also differ  with  respect  to  the
       following Linux-specific process attributes:

       *  The  child does not inherit directory change notifications (dnotify)
          from its parent (see the description of FF__NNOOTTIIFFYY in ffccnnttll(2)).

       *  The pprrccttll(2) PPRR__SSEETT__PPDDEEAATTHHSSIIGG setting is reset  so  that  the  child
          does not receive a signal when its parent terminates.

       *  The  default  timer slack value is set to the parent's current timer
          slack value.  See the description of PPRR__SSEETT__TTIIMMEERRSSLLAACCKK in pprrccttll(2).

       *  Memory mappings that have been marked with the mmaaddvviissee(2) MMAADDVV__DDOONNTT--
          FFOORRKK flag are not inherited across a ffoorrkk().

       *  The   termination  signal  of  the  child  is  always  SSIIGGCCHHLLDD  (see
          cclloonnee(2)).

       *  The port access permission bits set by iiooppeerrmm(2) are  not  inherited
          by the child; the child must turn on any bits that it requires using
          iiooppeerrmm(2).

       Note the following further points:

       *  The child process is created with  a  single  thread--the  one  that
          called  ffoorrkk().   The  entire virtual address space of the parent is
          replicated in the child, including the states of mutexes,  condition
          variables,  and other pthreads objects; the use of pptthhrreeaadd__aattffoorrkk(3)
          may be helpful for dealing with problems that this can cause.

       *  The child inherits copies of the parent's set of open file  descrip-
          tors.   Each  file  descriptor  in the child refers to the same open
          file description (see ooppeenn(2)) as the corresponding file  descriptor
          in  the parent.  This means that the two descriptors share open file
          status flags, current file offset, and signal-driven I/O  attributes
          (see the description of FF__SSEETTOOWWNN and FF__SSEETTSSIIGG in ffccnnttll(2)).

       *  The  child inherits copies of the parent's set of open message queue
          descriptors (see mmqq__oovveerrvviieeww(7)).   Each  descriptor  in  the  child
          refers to the same open message queue description as the correspond-
          ing descriptor in the parent.  This means that the  two  descriptors
          share the same flags (_m_q___f_l_a_g_s).

       *  The  child  inherits  copies  of  the parent's set of open directory
          streams (see ooppeennddiirr(3)).  POSIX.1-2001 says that the  corresponding
          directory  streams  in  the parent and child _m_a_y share the directory
          stream positioning; on Linux/glibc they do not.

RREETTUURRNN VVAALLUUEE
       On success, the PID of the child process is returned in the parent, and
       0  is returned in the child.  On failure, -1 is returned in the parent,
       no child process is created, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEAAGGAAIINN ffoorrkk() cannot allocate sufficient memory to  copy  the  parent's
              page tables and allocate a task structure for the child.

       EEAAGGAAIINN

              A system-imposed limit on the number of threads was encountered.
              There are a number of limits that may trigger  this  error:  the
              RRLLIIMMIITT__NNPPRROOCC  soft  resource limit (set via sseettrrlliimmiitt(2)), which
              limits the number of processes and threads for a real  user  ID,
              was  reached;  the  kernel's  system-wide limit on the number of
              processes and threads, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_t_h_r_e_a_d_s_-_m_a_x, was reached
              (see  pprroocc(5));  or  the  maximum number of PIDs, _/_p_r_o_c_/_s_y_s_/_k_e_r_-
              _n_e_l_/_p_i_d___m_a_x, was reached (see pprroocc(5)).

       EEAAGGAAIINN The caller is operating under the SSCCHHEEDD__DDEEAADDLLIINNEE scheduling pol-
              icy and does not have the reset-on-fork flag set.  See sscchheedd(7).

       EENNOOMMEEMM ffoorrkk()  failed  to  allocate  the  necessary  kernel  structures
              because memory is tight.

       EENNOOSSYYSS ffoorrkk() is not supported on this platform (for example,  hardware
              without a Memory-Management Unit).

CCOONNFFOORRMMIINNGG TTOO
       SVr4, 4.3BSD, POSIX.1-2001.

NNOOTTEESS
       Under  Linux,  ffoorrkk()  is implemented using copy-on-write pages, so the
       only penalty that it incurs is the time and memory required  to  dupli-
       cate  the  parent's  page tables, and to create a unique task structure
       for the child.

       Since version 2.3.3, rather than invoking the  kernel's  ffoorrkk()  system
       call,  the  glibc  ffoorrkk()  wrapper that is provided as part of the NPTL
       threading implementation invokes cclloonnee(2) with flags that  provide  the
       same  effect  as  the  traditional  system  call.  (A call to ffoorrkk() is
       equivalent to a call to cclloonnee(2) specifying  _f_l_a_g_s  as  just  SSIIGGCCHHLLDD.)
       The  glibc wrapper invokes any fork handlers that have been established
       using pptthhrreeaadd__aattffoorrkk(3).

EEXXAAMMPPLLEE
       See ppiippee(2) and wwaaiitt(2).

SSEEEE AALLSSOO
       cclloonnee(2),  eexxeeccvvee(2),  eexxiitt(2),  sseettrrlliimmiitt(2),  uunnsshhaarree(2),   vvffoorrkk(2),
       wwaaiitt(2), ddaaeemmoonn(3), ccaappaabbiilliittiieess(7), ccrreeddeennttiiaallss(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 3.74 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       http://www.kernel.org/doc/man-pages/.



Linux                             2014-05-28                           FORK(2)
